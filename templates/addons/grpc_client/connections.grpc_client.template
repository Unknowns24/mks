package connections

import (
	pb "%%PACKAGE_NAME%%/src/proto"
	"%%PACKAGE_NAME%%/src/utils"
	"context"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var %%GRPC_SERVICE_NAME%%ClientGRPC pb.%%GRPC_SERVICE_NAME%%Client

func GRPC_InitialiceConnections() {
	// Create a context with timeout
	my%%GRPC_SERVICE_NAME%%Ctx, my%%GRPC_SERVICE_NAME%%Cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer my%%GRPC_SERVICE_NAME%%Cancel()

	// Opening the connection to my%%GRPC_SERVICE_NAME%% gRPC server
	my%%GRPC_SERVICE_NAME%%Conn, err := grpc.DialContext(my%%GRPC_SERVICE_NAME%%Ctx, utils.ENV.QUEUE_GRPC_HOST+":"+utils.ENV.QUEUE_GRPC_PORT, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(), grpc.WithReturnConnectionError())
	if err != nil {
		panic("[-] Cannot connect with my%%GRPC_SERVICE_NAME%% gRPC server \nError: \n " + err.Error())
	}

	%%GRPC_SERVICE_NAME%%ClientGRPC = pb.NewQueueServiceClient(my%%GRPC_SERVICE_NAME%%Conn)
}