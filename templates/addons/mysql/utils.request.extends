func Paginate(c *fiber.Ctx, tableName string, condition string, result interface{}) (fiber.Map, error) {
	sql := "SELECT * FROM " + tableName

	if condition != "" {
		sql += " WHERE " + condition
	}

	var total int64
	if condition != "" {
		libs.DB.Table(tableName).Where(condition).Count(&total)
	} else {
		libs.DB.Table(tableName).Count(&total)
	}

	// Si hay parametro de busqueda
	if search := EscapeSqlString(c.Query("search")); search != "" {
		// Se saca el modelo que se va a paginar
		model := reflect.TypeOf(result).Elem().Elem()

		// Se crea una variable para indicar si habia una condicion previa en el sql
		havePrevCondition := false

		// Se prepara el sql segun si tiene condicion o no para poder a√±adir condiciones
		if condition != "" {
			havePrevCondition = true
			sql = fmt.Sprintf("%s AND (", sql)
		} else {
			sql = fmt.Sprintf("%s WHERE ", sql)
		}

		// Se recorren todos los campos del modelo y se hace una busqueda por cada uno de ellos exceptuando ID para ver si coincide con los datos de busqueda
		for i := 0; i < model.NumField(); i++ {
			if strings.ToLower(model.Field(i).Name) != "id" {
				sql += fmt.Sprintf("%s LIKE '%%%s%%'", toSqlTableName(model.Field(i).Name), search)
				if (i + 1) < model.NumField() {
					sql += " OR "
				}
			}
		}

		// Si habia una condicion previa en el sql entonces se cierra parentesis
		if havePrevCondition {
			sql += ")"
		}
	}

	// Si hay parametros de ordenado
	if sort := EscapeSqlString(c.Query("sort")); sort != "" {

		if sort_dir := EscapeSqlString(c.Query("sort_dir")); sort_dir != "" {
			sql = fmt.Sprintf("%s ORDER BY %s %s", sql, sort, sort_dir)
		}
	}

	page, err1 := strconv.Atoi(c.Query("page", "1"))
	perPage, err2 := strconv.Atoi(c.Query("per_page", strconv.FormatInt(total, 10)))

	// Si alguno de los parametros de la url es invalido entonces retorna un bad request
	if err1 != nil || err2 != nil {
		return nil, errors.New(EndOutPut("{\"message\": \"ERRN104xA\"}"))
	}

	// Se calcula la cantidad de paginas
	lastPage := math.Ceil(float64(total) / float64(perPage))

	// Si la pagina pedida es mayor a la ultima pagina entonces se retornara la ultima
	if page > int(lastPage) {
		page = int(lastPage)
	}

	// Si la cantidad de datos por pagina es mayor a la cantidad total de datos, se devolvera pagina uno con todos los datos registrados
	if perPage > int(total) {
		page = 1
		perPage = int(total)
	}

	// Se crea el sql segun los parametros
	sql = fmt.Sprintf("%s LIMIT %d OFFSET %d", sql, perPage, ((page - 1) * perPage))

	// Se ejecuta el sql y se guarda en apps
	libs.DB.Raw(sql).Find(result)

	// Se retornan los datos con la informacion de paginacion
	return fiber.Map{
		"page":      page,
		"total":     total,
		"per_page":  perPage,
		"last_page": lastPage,
		"data":      result,
	}, nil
}

func toSqlTableName(str string) string {
	var newString string

	reg := regexp.MustCompile(`[A-Z][a-z]+|[A-Z][^a-z]+`)
	submatchall := reg.FindAllString(str, -1)
	matchs := len(submatchall)

	for i := 0; i < matchs; i++ {
		newString += strings.ToLower(submatchall[i])
		if (i + 1) < matchs {
			newString += "_"
		}
	}

	return newString
}

func EscapeSqlString(str string) string {
	if str == "" {
		return ""
	}

	newString := strings.Replace(str, "`", "", -1)
	newString = strings.Replace(newString, "'", "", -1)
	newString = strings.Replace(newString, "=", "", -1)
	newString = strings.Replace(newString, "||", "", -1)
	newString = strings.Replace(newString, "&&", "", -1)
	newString = strings.Replace(newString, ";", "", -1)

	return newString
}