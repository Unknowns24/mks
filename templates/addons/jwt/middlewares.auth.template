package middlewares

import (
	"%%PACKAGE_NAME%%/src/utils"
	"strconv"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v4"
)

func IsAuthenticated(c *fiber.Ctx) error {
	cookie := c.Cookies("jwt")

	token, err := jwt.Parse(cookie, func(token *jwt.Token) (interface{}, error) {
		return []byte(utils.ENV.APP_JWT_KEY), nil
	})

	if err != nil || !token.Valid {
		c.Status(fiber.StatusUnauthorized)
		return c.SendString("{\"message\": \"Invalid JWT\"}")	
	}

	claims := token.Claims.(jwt.MapClaims)

	data := claims["data"].(map[string]interface{})
	ip := data["ip"].(string)

	id, err := strconv.ParseUint(claims["iss"].(string), 10, 32)

	if err != nil {
		c.Status(fiber.StatusUnauthorized)
		return c.SendString("{\"message\": \"Invalid JWT\"}")
	}

	if id == 0 || (ip != c.Get("User-Ip", c.IP())) {
		c.Status(fiber.StatusUnauthorized)
		return c.SendString("{\"message\": \"The user in the JWT is Invalid\"}")
	}

	c.Context().SetUserValue("userId", uint(id))
	return c.Next()
}

func GenerateJWT(id uint, keeplogin bool, ipAddress string) (string, error) {
	// Generate date depending on keeplogin
	date := jwt.NewNumericDate(time.Now().Add(time.Hour * 24)) // JWT Have 1 day of duration

	if keeplogin {
		date = jwt.NewNumericDate(time.Now().Add(time.Hour * 24 * 7)) // JWT Have 1 week of duration
	}

	// Creating custom claims
	claims := jwt.MapClaims{
		"iss": strconv.Itoa(int(id)),
		"exp": date.Unix(),
		"data": map[string]string{
			"ip": ipAddress,
		},
	}

	token, err := jwt.NewWithClaims(jwt.SigningMethodHS256, claims).SignedString([]byte(utils.ENV.APP_JWT_KEY))

	return token, err
}