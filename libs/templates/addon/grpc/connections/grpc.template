package connections

import (
	pb "%PACKAGE_NAME%/src/proto"
	"%PACKAGE_NAME%/src/utils"
	"context"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var myserviceServiceClientGRPC pb.myserviceServiceClient

func GRPC_InitialiceConnections() {
	// Create a context with timeout
	myserviceCtx, myserviceCancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer myserviceCancel()

	// Opening the connection to myservice gRPC server
	myserviceConn, err := grpc.DialContext(myserviceCtx, utils.ENV.QUEUE_GRPC_HOST+":"+utils.ENV.QUEUE_GRPC_PORT, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(), grpc.WithReturnConnectionError())
	if err != nil {
		panic("[-] Cannot connect with myservice gRPC server \nError: \n " + err.Error())
	}

	myserviceServiceClientGRPC = pb.NewQueueServiceClient(myserviceConn)
}